void insert(struct TrieNode *root, string key)
{
    int level;
    int length = key.size();
    int index;
    
    //if not present, we insert key into trie. If the key is prefix 
    //of trie node, we just mark the leaf node.
    struct TrieNode *pCrawl = root;

    for (level = 0; level < length; level++) {
        index = CHAR_TO_INDEX(key[level]);
        if (!pCrawl->children[index]) pCrawl->children[index] = getNode();

        pCrawl = pCrawl->children[index];
    }

    //marking last node as leaf.
    pCrawl->isLeaf = true;
}

//Function to use TRIE data structure and search the given string.
bool search(struct TrieNode *root, string key) 
{
    int level;
    int length = key.size();
    int index;
    struct TrieNode *pCrawl = root;

    for (level = 0; level < length; level++) 
    {
        index = CHAR_TO_INDEX(key[level]);
        if (!pCrawl->children[index]) 
        return false;

        pCrawl = pCrawl->children[index];
    }
    //returning true if key is present else false.
    return (pCrawl != NULL && pCrawl->isLeaf);
}
